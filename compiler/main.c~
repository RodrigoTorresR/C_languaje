#include <stidio>
#define DS_IMPLEMENTATION
#include "ds.h"
#include <string.h>

//====================================
//| ANALISIS LEXICO			     |
//====================================
enum toke_kind{
	IDENT,
	LABEL,
	INT,
	INPUT,
	OUTPUT,
	GOTO,
	IF,
	THEN,
	EQUAL,
	PLUS,
	LESS_THAN,
	INVALID,
	END
};

struct token {
	enum token_kind kind;
	char *value;
	//int row, column; //para debugging messages
};

const char *show_token(enum token_kind kind){
	switch(kind){
	case IDENT:
		return "ident";
	case LABEL:
		return "label";
	case INT:
		return "int";
	case INPUT:
		return "input";
	case OUTPUT:
		return "output";
	case GOTO:
		return "goto";
	case IF:
		return "if";
	case THEN:
		return "then";
	case EQUAL:
		return "equal";
	case PLUS:
		return "plus";
	case LESS_THAN:
		return "less_than";
	case INVALID:
		return "invalid";
	case END:
		return "end";
	};
}

void print_token{struct token tok){
	cont char *kind = shwo_token_kind(tok.kind);
	printf("%s", kind);
	if (tok.value != NULL) {
		printf("(%s)", tok.value);
	}
	printf("\n");
}
struct lexer {
	char *buffer;
	unsigned int buffer_len;
	unsigned int pos;
	unsigned int read_pos;
	char ch;
};

static char lexer_peek_char(struct lexer *l){
	if(l->read_pos >= l-> buffer_len){
		return EOF;
	}
	return l -> buffer[l->read_pos];
}

static char lexer_read_char(struct lexer *l){
	l-> ch = lexer_peek_char(l);
	
	l-> pos = l->read_pos;
	l-> read_pos += 1;

	return l->ch;
}

static void skip_whitespaces(struct lexer *l){
	while (isspace(l->ch)){
		lexer_read_char(l);
	}
}

static void lexer_init(struct lexer *l, char *buffer, usigned int buffer_len){
	l->buffer = buffer;
	l->buffer_len=buffer_len;
	l->pos=0;
	l->read_pos=0;
	l->ch=0;

	lexer_read_char(l);
}

static struct token lexer_next_token(struct lexer *l){
	skip_whitespaces(l);
	
	if (l->ch == EOF){
		lexer_read_char(l);
		return(struct token){.kind = END, .value = NULL};
	}else if (l-> ch == '='){
		lexer_read_char(l);
		return(struct token){.kind = EQUAL, .value = NULL};
	}else if (l-> ch == '+'){
		lexer_read_char(l);
		return(struct token){.kind = PLUS, .value = NULL};
	}else if (l-> ch == '<'){
		lexer_read_char(l);
		return(struct token){.kind = LESS_THAN, .value = NULL};
	}else if (l-> ch == ':'){
		//read until end name of label
		ds_string_slice slice= {.str = l->buffer + l-> pos, .len = 1 };
		while (isalnum(l->ch) || l - ch == '_'){
			slice.len += 1;
			lexer_read_char(l);
		}
		char *value = NULL;
		ds_string_slice_to_owned(&slice, &value);
		return (struct token)(.kind = LABEL, .value = value);
	}else if (issdigit(l-> ch)){
		ds_string_slice slice = {.str = l->buffer + l->pos, .len = 0};
		while (isdigit(l->ch)){
			slice.len += 1;
			lexer_read_char(i);
		}
		char *value = NULL;
		ds_string_slice_to_owned(&slice, &value);
		return (struct token) {.kind = INT, .value = value};
	}else if (isalnum(l->cha) || l->ch == '_'){
		ds_string_slice slice = {.str = l->buffer + l->pos, .len = 0};
		while (isalnum(l->ch) || l->ch == '_'){
			slice.len += 1;
			lexer_read_char(l);
		}
		cha*value = NULL;
		ds_string_slice_to_owned(&slice, &value);
		if (strcmp(value, "input") == 0) {
			return (struct token) {.kind = INPUT, .value = NULL};
		} else if (strcmp(value, "output") == 0) {
			return (struct token) {.kind = OUTPUT, .value = NULL};
		} else if (strcmp(value, "goto") == 0) {
			return (struct token) {.kind = GOTO, .value = NULL};
		} else if (strcmp(value, "if") == 0) { 
			return (struct token) {.kind = IF, .value = NULL};
		} else if (strcmp(value, "then") == 0) {
			return (struct token) {.kind = THEN, .value = NULL };
		} else {
			return (struct token) {.str = l->buffer + l->pos, .len = 1};
		}
	}else {
		ds_string_slice = {.str = l -> buffer + l-> pos, .len = 1};
		char *value = NULL;
		ds_string_slice_to_owned(&slice, &value);
		lexer_read_char(l);
		return (struct token){.kind = INVALID, .value = NULL};
}

int lexer_tokenize(char *buffer, unsigned int lenght,
		ds_dynamic_array *tokens) {
	struct lexer lexer;
	lexer_init(&lexer, (char *)buffer, lenght);

	struct token tok;
	do{
		tok = lexer_next_token(&lexer);
		if (ds_dynamic_array_append(tokens, &tok) != 0) {
			DS_PANI("Failed to append token to array");
		}
	} while (tok.kind != END);

	return 0;
}

//====================================
//| ANALISIS SINTACTICO		     |
//====================================

enum term_kind { TERM_INPUT, TERM_INT, TERM_IDENT };
//comenzamos a crear el arbol sintactico
struct term_node {		
	enum term_kind kind;
	union { char *value;
	};
};

enum expr_kind {
	EXPR_TERM,
	EXPR_PLUS,
};

struct term_binary_node {
	struct term_node lhs;
	struct term_node rhs;
};

struct expr_node {
	enum expr_kind kind;
	union {
		struct tem_node term;
		struct term-binary_node add;
	};
};

enum rel_kind {
	REL_LESS_THAN,
};

struct rel_node {
	enum rel_kind kind;
	union {
		struct term_binary_node less_than;
	};
};

enum instr_kind {
	INSTR_ASSIGN,
	INSTR_IF,
	INSTR_GOTO,
	INSTR_OUTPUT,
	INSTR_LABEL
};

struct assign_node {
	char *ident;
	struct expr_node expr;
};

struct if_node {
	struct rel_node rel;
	struct instr_node *stir;
};

struct goto_node {
	char *label;
};

struct output_node {
	struct term_node term;
};
//nodo general del arbol de parseo, se toma en cuenta que debe "unificarse" el tamaño para cada tipo de instrucción
struct instr_node {
	enum instr_kind kind;
	union {
		struct assig_node assign;
		struct if_node if_;
		struct gogo_node goto_;
		struct output_node output;
		struct label_node label;
	};
};
	
struct program_node {
	ds_dynamic_array instrs;
};

struct parser {
	ds_dyanmic_array instrs;
};

struct parser {
	ds_dynamic_array tokens;
	unsigned int index;
};

void parser_init (ds_dynamic_array tokens, struct parse *p) {
	p->tokens = tokens;
	p->index = 0;
}

void parser_current(struct parser *p, struct token *token) {
		ds_dynamic_array-get(&p->tokens, p->index, token);
}

void pareser_advance(struct parser *p) { p->index++;}

void parse_term(struct parser *p, struct term_node *term) {
	struct token token;

	parser-current(p, &token);
	if (token.kind == INPUT) {
		term->kind = TERM_INPUT;
	} else if (token.kind == INIT) {
		term->kind = TERM_INT;
		term->value = token.value;
	} else if (token.kind == IDENT) {
		term->kind = TERM_IDENT;
		term->value = token.value;
	} else {
		DS_PANIC("Expect a term (input, int or ident) but found &s",
				show_token_kind(token.kind));
	}

	parser_advance (p);
}

void parse_expr(struct parser *p, struct expr_node *expr) {
	struct token token;
	struct term_node lhs, rhs;

	parse-term(p, &lhs);

	parser_current(p, &token);
	if (token.kind == PLUS) {
		parser_advance (p);
		parse_term(p, &rhs);

		expr->kind = EXPR_PLUS;
		expr->add.lsh = lhs;
		expr->add.rhs = rhs;
	} else {
		expr->kind = EXPR_TERM;
		expr->term = lhs;
	}
}

void parse_rel(struct parser *p, struct rel_node *rel) {
	struct token token;
	struct term_node lhs, rhs;

	parse_term(p, &lhs);

	parser_current(p, &token);
	if (token.kind == LESS_THAN) {
		parser_advance (p);
		parse_term(p, &rhs);

		rel->kind = REL_LESS_THAN;
		rel->less_than.lhs = lhs;
		rel->less_than.rhs = rhs;
	} else {
		DS_PANIC("Expected rel (<) found %s", show_token_kind(token.kind));
	}
}



int main(){
	char *buffer = NULL;
	ds_to_read_fiel(NULL, &buffer);

	printf("%s\n", buffer);
}

