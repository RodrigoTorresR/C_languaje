//++++++++++++ BIBLIOTECAS ++++++++++
#include<ctype.h>
#include<stdio.h>
#define DS_IMPLEMENTATION
#include"ds.h"
#include<string.h>
//-+-+-+-+-+ Estructuras -+-+-+-+-+-+
//

//	Inician estructuras para el ANALISIS LEXICO

//Tipo de dato TOKEN inicia definicion
//requiere de una dato enumerado para identificar el tipo de Lexer
enum token_kind{
	IDENT,
	LABEL,
	INT,
	INPUT,
	OUTPUT,
	GOTO,
	IF,
	THEN,
	EQUAL,
	PLUS,
	LESS_THAN,
	INVALID,
	END
};
struct token{//los toquen estan formados por pares(lexer, valor)
	enum token_kind kind; //Almacenamos el dato Tipo de TOKEN
	char *value;//Algunso TOKEN requiren valores
};
//Tipo de dato TOKEN termina definicion

//Tipo de dato LEXER inicia definicion
struct lexer{//esta estructura guarda los datos necesarios para realizar el analisis lexico
	char *buffer;
	unsigned int buffer_len;
	unsigned int pos;//posición del caracter guardado en la variable chr (de mas abajo)
	unsigned read_pos;//siguiente posición a leer para el analisis (peek)
	char chr;//caracter leido para ingresar al automata finito
};
//Tipo de dato LEXER termina definicion
//	Terminan estructuras para el ANALISIS LEXICO

//-+-+-+-+-+ prototipos de las funciones -+-+-+-+-+-+
//
//Inician protos de funciones para el analisis LEXICO
static void lexer_init(struct lexer *l, char *buffer, unsigned int buffer_len);
static struct token lexer_next_token(struct lexer *l);
int lexer_tokenize(char *buffer, unsigned int lenght, ds_dynamic_array *tokens);
//Termina protos de funciones para el analisis LEXICO

int main(){
	char *buffer=NULL;//preparamos el buffer donde almacenaremos los caracteres durante la traducción
	int length=ds_io_read_file(NULL, &buffer);//Leeremos desde el "archivo" STDOUT (salida estandar) de linux
	
	//------------- ANALISIS LEXICO inicio ------------	
	ds_dynamic_array tokens;//usando una funcion de libreria externa creamos un arreglo dinamico para los tokens
	ds_dynamic_array_init(&tokens, sizeof(struct token));//inicalizamos el arreglo de tokens 
							     //con el dato struct token
	lexer_tokenize(buffer, length, &tokens);//Metodo que realiza el ANALISIS LEXICO	retorna el resultado
						//en una variable Estatica de array tipo TOKEN
	//------------- ANALISIS LEXICO inicio ------------	
	


	return 0;
}

//=========== DEFINICIONES DE LAS FUNCIONES ==========
//
//	ANALISIS LEXICO
int lexer_tokenize(char *buffer, unsigned int length, ds_dynamic_array *tokens)
{
	struct lexer lexer;
	lexer_init(&lexer, (char *)buffer, length);

	struct token tok;
	do{
		tok = lexer_next_token(&lexer);
		if (ds_dynamic_array_append(tokens, &tok) != 0){
			DS_PANIC("Failed to append token to array");
		}
	} while (tok.kind != END);
	return 0;
}
